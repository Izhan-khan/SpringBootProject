// Generated with g9.

package entities;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Version;

@Entity(name="saction_approved_intake_master")
public class SactionApprovedIntakeMaster implements Serializable {

    /** Primary key. */
    protected static final String PK = "id";

    /**
     * The optimistic lock. Available via standard bean get/set operations.
     */
    @Version
    @Column(name="LOCK_FLAG")
    private Integer lockFlag;

    /**
     * Access method for the lockFlag property.
     *
     * @return the current value of the lockFlag property
     */
    public Integer getLockFlag() {
        return lockFlag;
    }

    /**
     * Sets the value of the lockFlag property.
     *
     * @param aLockFlag the new value of the lockFlag property
     */
    public void setLockFlag(Integer aLockFlag) {
        lockFlag = aLockFlag;
    }

    @Column(name="2015_16_count", precision=10)
    private int _201516Count;
    @Column(name="2016_17_count", precision=10)
    private int _201617Count;
    @Column(name="2017_18_count", precision=10)
    private int _201718Count;
    @Column(name="2018_19_count", precision=10)
    private int _201819Count;
    @Column(name="2019_20_count", precision=10)
    private int _201920Count;
    @Column(name="2020_21_count", precision=10)
    private int _202021Count;
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(unique=true, nullable=false, precision=10)
    private int id;

    /** Default constructor. */
    public SactionApprovedIntakeMaster() {
        super();
    }

    /**
     * Access method for _201516Count.
     *
     * @return the current value of _201516Count
     */
    public int get_201516Count() {
        return _201516Count;
    }

    /**
     * Setter method for _201516Count.
     *
     * @param a_201516Count the new value for _201516Count
     */
    public void set_201516Count(int a_201516Count) {
        _201516Count = a_201516Count;
    }

    /**
     * Access method for _201617Count.
     *
     * @return the current value of _201617Count
     */
    public int get_201617Count() {
        return _201617Count;
    }

    /**
     * Setter method for _201617Count.
     *
     * @param a_201617Count the new value for _201617Count
     */
    public void set_201617Count(int a_201617Count) {
        _201617Count = a_201617Count;
    }

    /**
     * Access method for _201718Count.
     *
     * @return the current value of _201718Count
     */
    public int get_201718Count() {
        return _201718Count;
    }

    /**
     * Setter method for _201718Count.
     *
     * @param a_201718Count the new value for _201718Count
     */
    public void set_201718Count(int a_201718Count) {
        _201718Count = a_201718Count;
    }

    /**
     * Access method for _201819Count.
     *
     * @return the current value of _201819Count
     */
    public int get_201819Count() {
        return _201819Count;
    }

    /**
     * Setter method for _201819Count.
     *
     * @param a_201819Count the new value for _201819Count
     */
    public void set_201819Count(int a_201819Count) {
        _201819Count = a_201819Count;
    }

    /**
     * Access method for _201920Count.
     *
     * @return the current value of _201920Count
     */
    public int get_201920Count() {
        return _201920Count;
    }

    /**
     * Setter method for _201920Count.
     *
     * @param a_201920Count the new value for _201920Count
     */
    public void set_201920Count(int a_201920Count) {
        _201920Count = a_201920Count;
    }

    /**
     * Access method for _202021Count.
     *
     * @return the current value of _202021Count
     */
    public int get_202021Count() {
        return _202021Count;
    }

    /**
     * Setter method for _202021Count.
     *
     * @param a_202021Count the new value for _202021Count
     */
    public void set_202021Count(int a_202021Count) {
        _202021Count = a_202021Count;
    }

    /**
     * Access method for id.
     *
     * @return the current value of id
     */
    public int getId() {
        return id;
    }

    /**
     * Setter method for id.
     *
     * @param aId the new value for id
     */
    public void setId(int aId) {
        id = aId;
    }

    /**
     * Compares the key for this instance with another SactionApprovedIntakeMaster.
     *
     * @param other The object to compare to
     * @return True if other object is instance of class SactionApprovedIntakeMaster and the key objects are equal
     */
    private boolean equalKeys(Object other) {
        if (this==other) {
            return true;
        }
        if (!(other instanceof SactionApprovedIntakeMaster)) {
            return false;
        }
        SactionApprovedIntakeMaster that = (SactionApprovedIntakeMaster) other;
        if (this.getId() != that.getId()) {
            return false;
        }
        return true;
    }

    /**
     * Compares this instance with another SactionApprovedIntakeMaster.
     *
     * @param other The object to compare to
     * @return True if the objects are the same
     */
    @Override
    public boolean equals(Object other) {
        if (!(other instanceof SactionApprovedIntakeMaster)) return false;
        return this.equalKeys(other) && ((SactionApprovedIntakeMaster)other).equalKeys(this);
    }

    /**
     * Returns a hash code for this instance.
     *
     * @return Hash code
     */
    @Override
    public int hashCode() {
        int i;
        int result = 17;
        i = getId();
        result = 37*result + i;
        return result;
    }

    /**
     * Returns a debug-friendly String representation of this instance.
     *
     * @return String representation of this instance
     */
    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("[SactionApprovedIntakeMaster |");
        sb.append(" id=").append(getId());
        sb.append("]");
        return sb.toString();
    }

    /**
     * Return all elements of the primary key.
     *
     * @return Map of key names to values
     */
    public Map<String, Object> getPrimaryKey() {
        Map<String, Object> ret = new LinkedHashMap<String, Object>(6);
        ret.put("id", Integer.valueOf(getId()));
        return ret;
    }

}
